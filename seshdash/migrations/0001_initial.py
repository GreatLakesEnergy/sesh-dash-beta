# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-10-31 14:24
from __future__ import unicode_literals

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_mysql.models
import geoposition.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sesh_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('department', models.CharField(max_length=100)),
                ('is_org_admin', models.BooleanField(default=False)),
                ('phone_number', models.CharField(blank=True, max_length=12, null=True)),
                ('on_call', models.BooleanField(default=False)),
                ('send_mail', models.BooleanField(default=False)),
                ('send_sms', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Alert_Rule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_field', models.CharField(choices=[(b'BoM_Data_Point#battery_voltage', b'battery voltage'), (b'BoM_Data_Point#soc', b'System State of Charge'), (b'BoM_Data_Point#AC_output', b'AC Loads'), (b'BoM_Data_Point#pv_production', b'Solar Energy Produced'), (b'BoM_Data_Point#main_on', b'Grid Availible'), (b'BoM_Data_Point#genset_state', b'Generator on'), (b'RMC_status#minutes_last_contact', b'RMC Last Contact'), (b'battery_voltage', b'Battery Voltage in influx rule')], max_length=100)),
                ('value', models.FloatField()),
                ('operator', models.CharField(choices=[(b'eq', b'equals'), (b'lt', b'less than'), (b'gt', b'greater than')], default=b'lt', max_length=2)),
            ],
            options={
                'verbose_name': 'System Alert Rule',
                'verbose_name_plural': 'System Alert Rules',
            },
        ),
        migrations.CreateModel(
            name='BoM_Data_Point',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('soc', models.FloatField(default=0)),
                ('battery_voltage', models.FloatField(default=0)),
                ('AC_Voltage_in', models.FloatField(default=0)),
                ('AC_Voltage_out', models.FloatField(default=0)),
                ('AC_input', models.FloatField(default=0)),
                ('AC_output', models.FloatField(default=0)),
                ('AC_output_absolute', models.FloatField(default=0)),
                ('AC_Load_in', models.FloatField(default=0)),
                ('AC_Load_out', models.FloatField(default=0)),
                ('pv_production', models.FloatField(default=0)),
                ('inverter_state', models.CharField(blank=True, max_length=100, null=True)),
                ('main_on', models.BooleanField(default=False)),
                ('genset_state', models.IntegerField(default=0)),
                ('relay_state', models.IntegerField(default=0)),
                ('trans', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Data Point',
            },
        ),
        migrations.CreateModel(
            name='Daily_Data_Point',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_pv_yield', models.FloatField(default=0, verbose_name=b'Daily PV Yield')),
                ('daily_power_consumption_total', models.FloatField(default=0, verbose_name=b'Daily Power Consumption')),
                ('daily_power_cons_pv', models.FloatField(default=0, verbose_name=b'Power consumption pv')),
                ('daily_battery_charge', models.FloatField(default=0, verbose_name=b'Battery Charge')),
                ('daily_grid_outage_t', models.FloatField(default=0, verbose_name=b'Grid outage t')),
                ('daily_grid_outage_n', models.FloatField(default=0, verbose_name=b'Grid outagen n')),
                ('daily_grid_usage', models.FloatField(default=0, verbose_name=b'Grid usage')),
                ('daily_no_of_alerts', models.IntegerField(default=0, verbose_name=b'Number of alerts')),
                ('date', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'Daily Aggregate Data Point',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.CharField(choices=[(b'daily', b'Daily'), (b'weekly', b'Weekly'), (b'monthly', b'Monthly')], max_length=40)),
                ('day_to_report', models.IntegerField()),
                ('attributes', django_mysql.models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='RMC_status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(default=None, null=True)),
                ('minutes_last_contact', models.IntegerField(default=None)),
                ('signal_strength', models.IntegerField(default=None, null=True)),
                ('data_sent_24h', models.IntegerField(default=None, null=True)),
                ('time', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'RMC Status',
                'verbose_name_plural': "RMC Status's",
            },
        ),
        migrations.CreateModel(
            name='Sensor_BMV',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.IntegerField(choices=[(29, 29)], default=0)),
                ('index1', models.CharField(default=b'soc', max_length=40)),
                ('index2', models.CharField(default=b'ce', max_length=40)),
                ('index3', models.CharField(default=b'ttg', max_length=40)),
                ('index4', models.CharField(default=b'v', max_length=40)),
                ('index5', models.CharField(default=b'i', max_length=40)),
                ('index6', models.CharField(default=b'relay', max_length=40)),
                ('index7', models.CharField(default=b'alarm', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor_EmonPi',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.IntegerField(default=5, editable=False)),
                ('index1', models.CharField(default=b'power1', max_length=40)),
                ('index2', models.CharField(default=b'power2', max_length=40)),
                ('index3', models.CharField(default=b'power3', max_length=40)),
                ('index4', models.CharField(default=b'power4', max_length=40)),
                ('index5', models.CharField(default=b'v_battery_bank', max_length=40)),
                ('index6', models.CharField(default=b'Vrms', max_length=40)),
                ('index7', models.CharField(default=b'T1', max_length=40)),
                ('index8', models.CharField(default=b'T2', max_length=40)),
                ('index9', models.CharField(default=b'T3', max_length=40)),
                ('index10', models.CharField(default=b'T4', max_length=40)),
                ('index11', models.CharField(default=b'T5', max_length=40)),
                ('index12', models.CharField(default=b'T6', max_length=40)),
                ('index13', models.CharField(default=b'pulseCount', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor_EmonTh',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.IntegerField(choices=[(6, 6), (7, 7), (8, 8)], default=0)),
                ('index1', models.CharField(default=b'tempreature', max_length=40)),
                ('index2', models.CharField(default=b'external_tempreature', max_length=40)),
                ('index3', models.CharField(default=b'humidity', max_length=40)),
                ('index4', models.CharField(default=b'battery', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor_EmonTx',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.IntegerField(choices=[(19, 19), (20, 20), (21, 21), (22, 22)], default=0)),
                ('index1', models.CharField(default=b'ac_power1', max_length=40)),
                ('index2', models.CharField(default=b'pv_production', max_length=40)),
                ('index3', models.CharField(default=b'consumption', max_length=40)),
                ('index4', models.CharField(default=b'grid_in', max_length=40)),
                ('index5', models.CharField(default=b'AC_Voltage_out', max_length=40)),
                ('index6', models.CharField(blank=True, max_length=40, null=True)),
                ('index7', models.CharField(blank=True, max_length=40, null=True)),
                ('index8', models.CharField(blank=True, max_length=40, null=True)),
                ('index9', models.CharField(blank=True, max_length=40, null=True)),
                ('index10', models.CharField(blank=True, max_length=40, null=True)),
                ('index11', models.CharField(blank=True, max_length=40, null=True)),
                ('index12', models.CharField(blank=True, max_length=40, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor_Mapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_id', models.IntegerField()),
                ('node_id', models.IntegerField()),
                ('sensor_type', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Sesh_Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('isSilence', models.BooleanField()),
                ('emailSent', models.BooleanField()),
                ('smsSent', models.BooleanField()),
                ('slackSent', models.BooleanField()),
                ('point_model', models.CharField(default=b'BoM_Data_Point', max_length=40)),
                ('point_id', models.CharField(max_length=40)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_point', to='seshdash.Alert_Rule')),
            ],
            options={
                'verbose_name': 'System Alert',
                'verbose_name_plural': 'System Alerts',
            },
        ),
        migrations.CreateModel(
            name='Sesh_Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('send_slack', models.BooleanField(default=False)),
                ('slack_token', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Sesh_Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(max_length=100, unique=True)),
                ('comission_date', models.DateTimeField(verbose_name=b'date comissioned')),
                ('location_city', models.CharField(max_length=100)),
                ('location_country', models.CharField(max_length=100)),
                ('time_zone', models.CharField(default=b'Africa/Kigali', max_length=100)),
                ('position', geoposition.fields.GeopositionField(max_length=42)),
                ('installed_kw', models.FloatField()),
                ('system_voltage', models.IntegerField()),
                ('number_of_panels', models.IntegerField()),
                ('import_data', models.BooleanField(default=False)),
                ('battery_bank_capacity', models.IntegerField()),
                ('has_genset', models.BooleanField(default=False)),
                ('has_grid', models.BooleanField(default=False)),
                ('vrm_site_id', models.CharField(blank=True, default=b'', max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Sesh Site',
                'verbose_name_plural': 'Sesh Sites',
                'permissions': (('view_Sesh_Site', 'View Sesh Site'),),
            },
        ),
        migrations.CreateModel(
            name='Site_Measurements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row1', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'soc', max_length=30)),
                ('row2', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'battery_voltage', max_length=30)),
                ('row3', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'AC_output_absolute', max_length=30)),
                ('row4', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'AC_Load_in', max_length=30)),
                ('row5', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'AC_Load_out', max_length=30)),
                ('row6', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'AC_Voltage_in', max_length=30)),
                ('row7', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'AC_Voltage_out', max_length=30)),
                ('row8', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'AC_input', max_length=30)),
                ('row9', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'AC_output', max_length=30)),
                ('row10', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'cloud_cover', max_length=30)),
                ('row11', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'daily_pv_yield', max_length=30)),
                ('row12', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'daily_battery_charge', max_length=30)),
                ('row13', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'daily_power_consumption_total', max_length=30)),
                ('row14', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'daily_power_cons_pv', max_length=30)),
                ('row15', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'cloud_cover', b'Cloud Cover'), (b'daily_battery_charge', b'Daily Battery Charge'), (b'daily_grid_outage_n', b'Daily Grid Outage N'), (b'daily_grid_outage_t', b'Daily Grid Outage T'), (b'daily_grid_usage', b'Daily Grid Usage'), (b'daily_no_of_alerts', b'Daily Number of Alerts'), (b'daily_power_cons_pv', b'Daily Power Cons Pv'), (b'daily_power_consumption_total', b'Daily Power Consumption Total'), (b'daily_pv_yield', b'Daily Pv Yield')], default=b'daily_grid_outage_n', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Site_Weather_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(unique_for_date=True, verbose_name=b'date')),
                ('temp', models.IntegerField()),
                ('condition', models.CharField(max_length=20)),
                ('cloud_cover', models.FloatField()),
                ('sunrise', models.TimeField()),
                ('sunset', models.TimeField()),
            ],
            options={
                'verbose_name': 'Weather Data',
            },
        ),
        migrations.CreateModel(
            name='Slack_Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('is_alert_channel', models.BooleanField(default=True)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slack_channel', to='seshdash.Sesh_Organisation')),
            ],
        ),
        migrations.CreateModel(
            name='Status_Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row1', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'last_contact', b'Last Contact')], default=b'soc', max_length=30)),
                ('row2', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'last_contact', b'Last Contact')], default=b'battery_voltage', max_length=30)),
                ('row3', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'last_contact', b'Last Contact')], default=b'AC_output_absolute', max_length=30)),
                ('row4', models.CharField(choices=[(b'AC_Load_in', b'AC Load in'), (b'AC_Load_out', b'AC Load out'), (b'AC_Voltage_in', b'AC Voltage in'), (b'AC_Voltage_out', b'AC Voltage out'), (b'AC_input', b'AC input'), (b'AC_output', b'AC output'), (b'AC_output_absolute', b'AC output absolute'), (b'battery_voltage', b'Battery Voltage'), (b'genset_state', b'Genset state'), (b'main_on', b'Main on'), (b'pv_production', b'PV production'), (b'relay_state', b'Relay state'), (b'soc', b'State of Charge'), (b'trans', b'Trans'), (b'last_contact', b'Last Contact')], default=b'last_contact', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Status_Rule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Trend_Data_Point',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pv_yield', models.FloatField(default=0)),
                ('battery_usage', models.FloatField(default=0)),
                ('system_efficiency', models.FloatField(default=0)),
                ('system_capacity', models.FloatField(default=0)),
                ('battery_efficieny', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='VRM_Account',
            fields=[
                ('vrm_user_id', models.CharField(default=b'', max_length=100, primary_key=True, serialize=False)),
                ('vrm_password', models.CharField(default=b'', max_length=100)),
                ('number_of_sites', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'VRM Account',
            },
        ),
        migrations.CreateModel(
            name='Sesh_RMC_Account',
            fields=[
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='seshdash.Sesh_Site')),
                ('api_key', models.CharField(default=b'', max_length=130, unique=True)),
                ('api_key_numeric', models.CharField(default=b'', max_length=130, unique=True)),
            ],
            options={
                'verbose_name': 'RMC API Account',
            },
        ),
        migrations.AddField(
            model_name='trend_data_point',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='site_weather_data',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='sesh_site',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Organisation'),
        ),
        migrations.AddField(
            model_name='sesh_site',
            name='site_measurements',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='seshdash.Site_Measurements'),
        ),
        migrations.AddField(
            model_name='sesh_site',
            name='status_card',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='seshdash.Status_Card'),
        ),
        migrations.AddField(
            model_name='sesh_site',
            name='vrm_account',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='seshdash.VRM_Account'),
        ),
        migrations.AddField(
            model_name='sesh_alert',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AlterUniqueTogether(
            name='sensor_mapping',
            unique_together=set([('site_id', 'node_id', 'sensor_type')]),
        ),
        migrations.AddField(
            model_name='sensor_emontx',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='sensor_emonth',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='sensor_emonpi',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='sensor_bmv',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='rmc_status',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='rmc_status',
            name='target_alert',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Alert'),
        ),
        migrations.AddField(
            model_name='report',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='daily_data_point',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='bom_data_point',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='bom_data_point',
            name='target_alert',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Alert'),
        ),
        migrations.AddField(
            model_name='alert_rule',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Site'),
        ),
        migrations.AddField(
            model_name='sesh_user',
            name='organisation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seshdash.Sesh_Organisation'),
        ),
        migrations.AddField(
            model_name='sesh_user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='site_weather_data',
            unique_together=set([('site', 'date')]),
        ),
        migrations.AlterUniqueTogether(
            name='daily_data_point',
            unique_together=set([('site', 'date')]),
        ),
        migrations.AlterUniqueTogether(
            name='bom_data_point',
            unique_together=set([('site', 'time')]),
        ),
    ]
